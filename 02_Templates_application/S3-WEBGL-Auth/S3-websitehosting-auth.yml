#cloudfrontを扱う場合、北米リージョン(us-east-1)でスタックを作成すること

AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: |
  this is for s3 websitehosting with WEBGL and Authentication
Parameters:
#バケット名
  MainBucketname:
    Description: input your bucket name where storing lambda zip file
    Type: String

  Bucketname:
    Description: input your bucket name. you must input like domain name. example[example.com]
    Type: String

  Bucketversion:
    Description: select Enabled when if you need versioning
    Type: String
    AllowedValues: 
      - Enabled
      - Suspended
    Default: Suspended

# IAM
  IAMPolicyName:
    Description: this is IAM Policy Name
    Type: String
    Default: PolicyLambdaEdge
  IAMRoleName:
    Description: this is IAM Role Name
    Type: String
    Default: RoleLambdaEdge


#Lambda関数名
  AuthLambdaName:
    Description: this is authentication lambda name
    Type: String
    Default: AuthenticationLambda

  Viewobj:
    Description: input your main html file
    Type: String
    Default: index.html

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "input your main bucket name where storing lambda zip file"
        Parameters:
          - MainBucketname
      -
        Label:
          default: "S3 Bucket Configuration"
        Parameters:
          - Bucketname
          - Bucketversion
      -
        Label:
          default: "Lambda Bucket Configuration"
        Parameters:
          - AuthLambdaName
      -
        Label:
          default: "IAM Role Configuration"
        Parameters:
          - IAMPolicyName
          - IAMRoleName

      -
        Label:
          default: "HTML file Configuration"
        Parameters:
          - Viewobj

Resources:
#S3バケット
  BucketID:
    Type: AWS::S3::Bucket
    # DeletionPolicy: Retain #スタック削除時、S3バケット内が空でないとエラーが発生するためスタックの削除時はS3バケットを削除しないようにする
    Properties:
      BucketName: !Ref Bucketname
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: !Ref Bucketversion

  BucketPolicyID:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BucketID
      PolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${BucketID}/*
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}

  IAMPolicyID:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
            -
                Effect: Allow
                Action:
                    - 'lambda:GetFunction'
                    - 'lambda:EnableReplication*'
                    - 'iam:CreateServiceLinkedRole'
                    - 'cloudfront:CreateDistribution'
                    - 'cloudfront:UpdateDistribution'
                Resource: '*'

      PolicyName: !Ref IAMPolicyName
      Roles:
        - !Ref IAMRoleID

  IAMRoleID:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
            -
                Effect: Allow
                Principal:
                    Service:
                        - lambda.amazonaws.com
                        - edgelambda.amazonaws.com
                Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole #Lambdaのロググループ作成用ポリシー(コンソールでは自動作成される)
      RoleName: !Ref IAMRoleName

  LambdaFunctionID:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: sample
      CodeUri: 
        Bucket: !Ref MainBucketname
        Key: websitehosting_webgl.zip
      FunctionName: !Ref AuthLambdaName
      Handler: websitehosting_webgl.handler
      Role: !GetAtt IAMRoleID.Arn
      Runtime: nodejs12.x
    

  CloudFrontDistributionID:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        # Aliases: #ドメインのエイリアスの設定
        #   - String
        Comment: this distribution is created for s3 website hosting authentication #コメント
        CustomErrorResponses: 
          - ErrorCachingMinTTL: 10
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: !Sub /${Viewobj}
          - ErrorCachingMinTTL: 10
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: !Sub /${Viewobj}
        DefaultCacheBehavior: 
          AllowedMethods: 
            - GET
            - HEAD
          CachedMethods: 
            - GET
            - HEAD
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad #Managed-CachingDisabled
          LambdaFunctionAssociations: 
            - EventType: viewer-request
              IncludeBody: false
              LambdaFunctionARN: !Ref LambdaFunctionID.Version
          TargetOriginId: !Ref BucketID
          ViewerProtocolPolicy: allow-all
        DefaultRootObject: !Ref Viewobj
        Enabled: true #Distributionの有効化
        HttpVersion: http2 # or http1.1
        IPV6Enabled: true

        Origins: 
          - ConnectionAttempts: 3
            ConnectionTimeout: 10
            DomainName: !Sub ${BucketID}.s3.amazonaws.com
            Id: !Ref BucketID # CacheBehaviors または DefaultCacheBehavior のTargetOriginIdと一致していること
            S3OriginConfig: 
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        PriceClass: PriceClass_All # or PriceClass_200 or PriceClass_100
        ViewerCertificate: 
          # AcmCertificateArn: String
          CloudFrontDefaultCertificate: true #XX.cloudfront.netを利用する場合はその他の値は空に設定、エイリアスを設定する場合は変更する。
          # IamCertificateId: String
          # MinimumProtocolVersion: String
          # SslSupportMethod: String
        # WebACLId: String #WEBACLの設定

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref AWS::StackName


